/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package py.gov.itaipu.controlacceso.view.administracion.organizacion;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import py.gov.itaipu.controlacceso.action.CRUDAction;
import py.gov.itaipu.controlacceso.action.organizacion.OrganizacionAction;
import py.gov.itaipu.controlacceso.action.persona.PersonaAction;
import py.gov.itaipu.controlacceso.model.Organizacion;
import py.gov.itaipu.controlacceso.model.Persona;
import py.gov.itaipu.controlacceso.model.TipoDocumento;
import py.gov.itaipu.controlacceso.model.exception.EntidadExiste;
import py.gov.itaipu.controlacceso.model.exception.ErrorInesperado;
import py.gov.itaipu.controlacceso.utils.tree.CustomIconRenderer;
import py.gov.itaipu.controlacceso.utils.tree.UtilesArbol;

/**
 *
 * @author fboy
 */
public class JDialogOrganigrama extends javax.swing.JDialog {

    private CRUDAction<Organizacion> organizacionAction;
    private Persona persona;
    private Organizacion area;
    private Organizacion areaMudanza;
    private Organizacion areaPadre;
    private PersonaAction personaAction;
    private Boolean modoBuscador;
    private Object seleccionado;
    private boolean actualizarArbol;
    /**
     * Creates new form JDialogOrganigrama
     */
    public JDialogOrganigrama(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        modoBuscador = false;
        personaAction = new PersonaAction(new Persona());
        organizacionAction = new CRUDAction<Organizacion>();
        organizacionAction.setEntity(new Organizacion());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPaneOrganigrama = new javax.swing.JScrollPane();
        try{
            jTreeOrganigrama = new javax.swing.JTree();
            jTextFieldEmpleadoApellido = new javax.swing.JTextField();
            jButtonPersonaNuevo = new javax.swing.JButton();
            jTextFieldEmpleadoNombre = new javax.swing.JTextField();
            jLabel1 = new javax.swing.JLabel();
            jLabel7 = new javax.swing.JLabel();
            jTextFieldEmpleadoNroDoc = new javax.swing.JTextField();
            jButtonOrganizacionNuevo = new javax.swing.JButton();
            jLabel8 = new javax.swing.JLabel();
            jTextFieldAreaNombre = new javax.swing.JTextField();
            jTextFieldEmpleadoOrganizacion = new javax.swing.JTextField();
            jTextFieldAreaPadreNombre = new javax.swing.JTextField();
            jButtonGuardarArea = new javax.swing.JButton();
            jLabel2 = new javax.swing.JLabel();
            jButtonGuardarEmpleado = new javax.swing.JButton();
            jLabel3 = new javax.swing.JLabel();
            jButtonEditar = new javax.swing.JButton();
            jButtonCancelarUsuario = new javax.swing.JButton();
            jButtonCancelarArea = new javax.swing.JButton();
            jButtonEliminar = new javax.swing.JButton();
            jButtonMudarEmpleado = new javax.swing.JButton();
            jLabel9 = new javax.swing.JLabel();
            jTextFieldFiltroArbol = new javax.swing.JTextField();
            jButtonBuscar = new javax.swing.JButton();
            jButtonLimpiar = new javax.swing.JButton();

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setTitle("ORGANIGRAMA");
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowActivated(java.awt.event.WindowEvent evt) {
                    formWindowActivated(evt);
                }
            });
            getContentPane().setLayout(null);

            jLabel6.setText("Apellido:");
            getContentPane().add(jLabel6);
            jLabel6.setBounds(510, 260, 78, 14);

            jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            jLabel4.setText("Empleado");
            getContentPane().add(jLabel4);
            jLabel4.setBounds(510, 210, 78, 15);

            jLabel5.setText("Nombre:");
            getContentPane().add(jLabel5);
            jLabel5.setBounds(510, 230, 78, 14);

            DefaultMutableTreeNode root = UtilesArbol.crearArbol("ORGANIGRAMA", true,false,false);
            jTreeOrganigrama = new JTree(root);
            jTreeOrganigrama.setCellRenderer(new CustomIconRenderer());
            jTreeOrganigrama.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    jTreeOrganigramaMousePressed(evt);
                }
            });
            jTreeOrganigrama.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                    jTreeOrganigramaValueChanged(evt);
                }
            });
            jScrollPaneOrganigrama.setViewportView(jTreeOrganigrama);
        } catch (py.gov.itaipu.controlacceso.model.exception.ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexi√≥n a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }

        getContentPane().add(jScrollPaneOrganigrama);
        jScrollPaneOrganigrama.setBounds(20, 66, 480, 440);

        jTextFieldEmpleadoApellido.setEditable(false);
        getContentPane().add(jTextFieldEmpleadoApellido);
        jTextFieldEmpleadoApellido.setBounds(610, 260, 230, 20);

        jButtonPersonaNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/persona.jpg"))); // NOI18N
        jButtonPersonaNuevo.setText("Empleado");
        jButtonPersonaNuevo.setToolTipText("Cargar un Nuevo Empleado");
        jButtonPersonaNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPersonaNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonPersonaNuevo);
        jButtonPersonaNuevo.setBounds(140, 40, 110, 17);

        jTextFieldEmpleadoNombre.setEditable(false);
        getContentPane().add(jTextFieldEmpleadoNombre);
        jTextFieldEmpleadoNombre.setBounds(610, 230, 230, 20);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Area Interna:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(510, 110, 91, 15);

        jLabel7.setText("Nro Documento:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(510, 290, 91, 14);

        jTextFieldEmpleadoNroDoc.setEditable(false);
        getContentPane().add(jTextFieldEmpleadoNroDoc);
        jTextFieldEmpleadoNroDoc.setBounds(610, 290, 230, 20);

        jButtonOrganizacionNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/organizacion.png"))); // NOI18N
        jButtonOrganizacionNuevo.setText(" Area");
        jButtonOrganizacionNuevo.setToolTipText("Cargar una Nueva Area");
        jButtonOrganizacionNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrganizacionNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonOrganizacionNuevo);
        jButtonOrganizacionNuevo.setBounds(20, 40, 110, 17);

        jLabel8.setText("Area:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(510, 320, 78, 14);

        jTextFieldAreaNombre.setEditable(false);
        jTextFieldAreaNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAreaNombreActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldAreaNombre);
        jTextFieldAreaNombre.setBounds(610, 130, 230, 20);

        jTextFieldEmpleadoOrganizacion.setEditable(false);
        getContentPane().add(jTextFieldEmpleadoOrganizacion);
        jTextFieldEmpleadoOrganizacion.setBounds(610, 320, 230, 20);

        jTextFieldAreaPadreNombre.setEditable(false);
        getContentPane().add(jTextFieldAreaPadreNombre);
        jTextFieldAreaPadreNombre.setBounds(610, 160, 230, 20);

        jButtonGuardarArea.setText("Guardar");
        jButtonGuardarArea.setEnabled(false);
        jButtonGuardarArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarAreaActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGuardarArea);
        jButtonGuardarArea.setBounds(760, 190, 80, 15);

        jLabel2.setText("Nombre:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(510, 130, 78, 20);

        jButtonGuardarEmpleado.setText("Guardar");
        jButtonGuardarEmpleado.setEnabled(false);
        jButtonGuardarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarEmpleadoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGuardarEmpleado);
        jButtonGuardarEmpleado.setBounds(760, 350, 80, 15);

        jLabel3.setText("Area Superior:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(510, 160, 91, 14);

        jButtonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/edit.png"))); // NOI18N
        jButtonEditar.setText("Editar");
        jButtonEditar.setToolTipText("Editar Area-Empleado");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEditar);
        jButtonEditar.setBounds(260, 40, 110, 17);

        jButtonCancelarUsuario.setText("Cancel");
        jButtonCancelarUsuario.setEnabled(false);
        jButtonCancelarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancelarUsuario);
        jButtonCancelarUsuario.setBounds(680, 350, 80, 15);

        jButtonCancelarArea.setText("Cancel");
        jButtonCancelarArea.setEnabled(false);
        jButtonCancelarArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarAreaActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancelarArea);
        jButtonCancelarArea.setBounds(680, 190, 80, 15);

        jButtonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/delete.png"))); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.setToolTipText("Eliminar Area-Empleado");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEliminar);
        jButtonEliminar.setBounds(390, 40, 110, 17);

        jButtonMudarEmpleado.setText("Mudar");
        jButtonMudarEmpleado.setToolTipText("Mudar de Area");
        jButtonMudarEmpleado.setEnabled(false);
        jButtonMudarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMudarEmpleadoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonMudarEmpleado);
        jButtonMudarEmpleado.setBounds(610, 350, 70, 15);

        jLabel9.setText("Buscar");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(510, 70, 60, 20);
        getContentPane().add(jTextFieldFiltroArbol);
        jTextFieldFiltroArbol.setBounds(610, 70, 230, 20);

        jButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/view.png"))); // NOI18N
        jButtonBuscar.setToolTipText("Buscar Persona");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonBuscar);
        jButtonBuscar.setBounds(800, 90, 20, 20);

        jButtonLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/clear.jpeg"))); // NOI18N
        jButtonLimpiar.setToolTipText("Buscar Persona");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonLimpiar);
        jButtonLimpiar.setBounds(820, 90, 20, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeOrganigramaValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeOrganigramaValueChanged
        // TODO add your handling code here:
        if (jTreeOrganigrama.getLastSelectedPathComponent() != null) {
            DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeOrganigrama.getLastSelectedPathComponent();
            Object objSel = nodoSeleccionado.getUserObject();
            if (objSel.getClass().getSimpleName().equals("Persona")) {
                persona = (Persona) objSel;
                areaPadre = persona.getOrganizacion();

                jTextFieldEmpleadoApellido.setText(persona.getApellido());
                jTextFieldEmpleadoNombre.setText(persona.getNombre());
                if (persona.getOrganizacion()!=null && !persona.getOrganizacion().getNombre().equals("")) {
                    jTextFieldEmpleadoOrganizacion.setText(persona.getOrganizacion().getNombre());
                }
                jTextFieldEmpleadoNroDoc.setText(persona.getNumeroDocumento());
                jTextFieldAreaPadreNombre.setText("");
                jTextFieldAreaNombre.setText("");

            } else if (objSel.getClass().getSimpleName().equals("Organizacion")) {
                persona = null;
                area = (Organizacion) objSel;
                areaPadre = (Organizacion) objSel;

                jTextFieldAreaNombre.setText(areaPadre.getNombre());
                if (area.getOrganizacionPadre() != null) {
                    jTextFieldAreaPadreNombre.setText(areaPadre.getOrganizacionPadre().getNombre());
                }

                jTextFieldEmpleadoApellido.setText("");
                jTextFieldEmpleadoNombre.setText("");
                jTextFieldEmpleadoOrganizacion.setText("");
                jTextFieldEmpleadoNroDoc.setText("");

            } else {
                persona = null;
                area = null;
                areaPadre = null;
                jTextFieldAreaPadreNombre.setText("");
                jTextFieldAreaNombre.setText("");
                jTextFieldEmpleadoApellido.setText("");
                jTextFieldEmpleadoNombre.setText("");
                jTextFieldEmpleadoOrganizacion.setText("");
                jTextFieldEmpleadoNroDoc.setText("");
            }
        }
    }//GEN-LAST:event_jTreeOrganigramaValueChanged

    private void jTreeOrganigramaValueChangedMudar(TreeSelectionEvent evt) {
         DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeOrganigrama.getLastSelectedPathComponent();
         Object objSel = nodoSeleccionado.getUserObject(); 
         areaMudanza = (Organizacion) objSel;
         persona.setOrganizacion(areaMudanza);
         jTextFieldEmpleadoOrganizacion.setText(areaMudanza.getNombre());
    }
    
    
    private void jButtonPersonaNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPersonaNuevoActionPerformed
        // TODO add your handling code here:
        if (areaPadre == null || !esOrganizacion()) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR ORGANIZACION SUPERIOR.", "Error", 0);
        } else {
            persona = new Persona();
             //SETEAR CI como documento por defecto
            try {
                CRUDAction<TipoDocumento> tdAct = new CRUDAction<TipoDocumento>();
                TipoDocumento ci;
                ci = tdAct.findByNamedQuery("TipoDocumento.findCI").get(0);
                persona.setTipoDocumento(ci);
            } catch (ErrorInesperado ex) {
                Logger.getLogger(JDialogOrganigrama.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            persona.setOrganizacion(areaPadre);

            manejaOrganizacion(false);
            manejaPersona(true);
            jTreeOrganigrama.setEnabled(false);
        }

    }//GEN-LAST:event_jButtonPersonaNuevoActionPerformed

    private void manejaPersona(boolean activa) {
        if (activa) {
            jTextFieldEmpleadoApellido.setText("");
            jTextFieldEmpleadoApellido.setEditable(true);
            jTextFieldEmpleadoNombre.setText("");
            jTextFieldEmpleadoNombre.setEditable(true);
            jTextFieldEmpleadoOrganizacion.setText(areaPadre.getNombre());
            jTextFieldEmpleadoNroDoc.setText("");
            jTextFieldEmpleadoNroDoc.setEditable(true);
            jButtonGuardarEmpleado.setEnabled(true);
            jButtonCancelarUsuario.setEnabled(true);
            jButtonOrganizacionNuevo.setEnabled(false);
            jButtonPersonaNuevo.setEnabled(false);
            jButtonEditar.setEnabled(false);
            jButtonEliminar.setEnabled(false);
            jButtonBuscar.setEnabled(false);
            jButtonLimpiar.setEnabled(false);

        } else {
            jTextFieldEmpleadoApellido.setText("");
            jTextFieldEmpleadoApellido.setEditable(false);
            jTextFieldEmpleadoNombre.setText("");
            jTextFieldEmpleadoNombre.setEditable(false);
            jTextFieldEmpleadoNroDoc.setText("");
            jTextFieldEmpleadoNroDoc.setEditable(false);
            jTextFieldEmpleadoOrganizacion.setText("");
            jButtonGuardarEmpleado.setEnabled(false);
            jButtonCancelarUsuario.setEnabled(false);
            jButtonOrganizacionNuevo.setEnabled(true);
            jButtonPersonaNuevo.setEnabled(true);
            jButtonEditar.setEnabled(true);
            jButtonEliminar.setEnabled(true);
            jButtonBuscar.setEnabled(true);
            jButtonLimpiar.setEnabled(true);

        }
    }

    private void manejaOrganizacion(boolean activa) {
        if (activa) {
            jTextFieldAreaNombre.setText("");
            jTextFieldAreaNombre.setEditable(true);
            if (area.getNivelOrganigrama() > 1) {
                jTextFieldAreaPadreNombre.setText(areaPadre.getNombre());
            }
            jButtonGuardarArea.setEnabled(true);
            jButtonCancelarArea.setEnabled(true);
            jButtonOrganizacionNuevo.setEnabled(false);
            jButtonPersonaNuevo.setEnabled(false);
            jButtonEditar.setEnabled(false);
            jButtonEliminar.setEnabled(false);
            jButtonBuscar.setEnabled(false);
            jButtonLimpiar.setEnabled(false);
        } else {
            jTextFieldAreaNombre.setText("");
            jTextFieldAreaNombre.setEditable(false);
            jTextFieldAreaPadreNombre.setText("");
            jTextFieldAreaPadreNombre.setText("");
            jButtonGuardarArea.setEnabled(false);
            jButtonCancelarArea.setEnabled(false);
            jButtonOrganizacionNuevo.setEnabled(true);
            jButtonPersonaNuevo.setEnabled(true);
            jButtonEditar.setEnabled(true);
            jButtonEliminar.setEnabled(true);
            jButtonBuscar.setEnabled(true);
            jButtonLimpiar.setEnabled(true);


        }
    }

    private boolean esOrganizacion() {
        DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeOrganigrama.getLastSelectedPathComponent();
        if (!nodoSeleccionado.getUserObject().getClass().getSimpleName().equals("Organizacion")) {
            return false;
        }
        return true;
    }
    private void jButtonOrganizacionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrganizacionNuevoActionPerformed
        // TODO add your handling code here:
        try {
            if (areaPadre == null || !esOrganizacion()) {
                List<Organizacion> oPadre = organizacionAction.findByNamedQuery("Organizacion.findOrganizacionPadre");
                if (oPadre.size() > 0) {
                    JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR ORGANIZACION SUPERIOR.", "Error", 0);
                } else {
                    area = new Organizacion();
                    area.setNivelOrganigrama(1L);
                    manejaPersona(false);
                    manejaOrganizacion(true);
                    jTreeOrganigrama.setEnabled(false);
                }
            } else {
                area = new Organizacion();
                area.setOrganizacionPadre(areaPadre);
                area.setNivelOrganigrama(areaPadre.getNivelOrganigrama() + 1);
                manejaPersona(false);
                manejaOrganizacion(true);
                jTreeOrganigrama.setEnabled(false);

            }
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexi√≥n a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonOrganizacionNuevoActionPerformed

    private void jTextFieldAreaNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAreaNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAreaNombreActionPerformed

    private void jButtonGuardarAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarAreaActionPerformed
        // TODO add your handling code here:
        try {
            if (validarOrganizacion()) {
                area.setNombre(jTextFieldAreaNombre.getText().toUpperCase());
                area.setTipoOrganizacion("INTERNA");
                organizacionAction.setEntity(area);
                try {
                    if (area.getId() == null) {
                        if (organizacionAction.existeNombre(area.getNombre().toUpperCase())) {
                            List<Organizacion> orgs = organizacionAction.findEqualName(area.getNombre().toUpperCase());
                            Organizacion or = orgs.get(0);
                            if (or.getOrganizacionPadre() == null || or.getOrganizacionPadre().getId() == null) {
                                or.setOrganizacionPadre(area.getOrganizacionPadre());
                                or.setNivelOrganigrama(area.getOrganizacionPadre().getNivelOrganigrama() + 1);
                                organizacionAction.setEntity(or);
                                organizacionAction.crear();
                                OrganizacionAction orgAct = new OrganizacionAction(or);
                                orgAct.habilitar();
                                JOptionPane.showMessageDialog(this, "La Organizacion ya exist√≠a y estaba inhabilitada. Se habilit√≥ y asign√≥ a la Org Padre.", "Info", 1);
                            } else {
                                JOptionPane.showMessageDialog(this, "La organizaci√≥n ya existe", "Error", 0);
                                return;
                            }
                        } else {
                            organizacionAction.crear();
                            JOptionPane.showMessageDialog(this, "Se ha creado con exito el Area Interna", "Info", 1);
                        }
                    } else {
                        organizacionAction.guardar();
                        JOptionPane.showMessageDialog(this, "Se ha guardado con exito el Area Interna", "Info", 1);
                    }
                } catch (EntidadExiste e) {
                    JOptionPane.showMessageDialog(this, "La organizaci√≥n ya existe", "Error", 0);
                    return;
                }
                manejaOrganizacion(false);
//                DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeOrganigrama.getLastSelectedPathComponent();
                //                DefaultMutableTreeNode nodoNuevo = new DefaultMutableTreeNode(area,true);
                //                nodoSeleccionado.add(nodoNuevo);
                //                jTreeOrganigrama.repaint();
                actualizarArbol(true,true);
//                jTreeOrganigrama.setSelectionPath(new TreePath(nodoSeleccionado.getPath()));
//                jTreeOrganigrama.expandPath(new TreePath(nodoSeleccionado.getPath()));
                area = null;
                areaPadre = null;

            }
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexi√≥n a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonGuardarAreaActionPerformed
    private void actualizarArbol(boolean incluyePersonas, boolean seleccionable) {
        try {
            DefaultMutableTreeNode root = UtilesArbol.crearArbol("ORGANIGRAMA", incluyePersonas,false,false);
            jTreeOrganigrama = new JTree(root);
            jTreeOrganigrama.setCellRenderer(new CustomIconRenderer());
            if (seleccionable) {
                jTreeOrganigrama.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                    public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                        jTreeOrganigramaValueChanged(evt);
                    }
                });
            }else{
                jTreeOrganigrama.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                    public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                        jTreeOrganigramaValueChangedMudar(evt);
                    }
                });
            }

            jScrollPaneOrganigrama.setViewportView(jTreeOrganigrama);
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexi√≥n a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }
    
    
    
    private void jButtonGuardarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarEmpleadoActionPerformed
        // TODO add your handling code here:
        try {
            
            if (validarPersona()) {
                persona.setNombre(jTextFieldEmpleadoNombre.getText());
                persona.setApellido(jTextFieldEmpleadoApellido.getText());
                persona.setNumeroDocumento(jTextFieldEmpleadoNroDoc.getText());
                personaAction.setPersona(persona);
                try {
                    if (persona.getId() == null) {
                        personaAction.crear();
                        JOptionPane.showMessageDialog(this, "Se ha creado con exito el nuevo Empleado", "Info", 1);
                    } else {
                        personaAction.crear();
                        JOptionPane.showMessageDialog(this, "Se ha guardado con exito los Datos del Empleado", "Info", 1);
                    }
                } catch (EntidadExiste e) {
                    JOptionPane.showMessageDialog(this, "La persona ya existe", "Error", 0);
                    return;
                }

                manejaPersona(false);
                jButtonMudarEmpleado.setEnabled(false);
//                DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeOrganigrama.getLastSelectedPathComponent();
//                //                DefaultMutableTreeNode nodoNuevo = new DefaultMutableTreeNode(persona,true);
                //                nodoSeleccionado.add(nodoNuevo);
                //                jTreeOrganigrama.repaint();
                actualizarArbol(true,true);
//                jTreeOrganigrama.setSelectionPath(new TreePath(nodoSeleccionado.getPath()));
//                jTreeOrganigrama.expandPath(new TreePath(nodoSeleccionado.getPath()));
                persona = null;

            }
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexi√≥n a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonGuardarEmpleadoActionPerformed

    private void jTreeOrganigramaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeOrganigramaMousePressed
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && modoBuscador) {
            DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeOrganigrama.getLastSelectedPathComponent();
            seleccionado = nodoSeleccionado.getUserObject();
            this.dispose();
        }
    }//GEN-LAST:event_jTreeOrganigramaMousePressed

    public Object getSeleccionado() {
        return seleccionado;
    }

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if (modoBuscador) {
            jButtonPersonaNuevo.setVisible(false);
            jButtonOrganizacionNuevo.setVisible(false);
            jButtonGuardarArea.setVisible(false);
            jButtonGuardarEmpleado.setVisible(false);
            jButtonMudarEmpleado.setVisible(false);
            jButtonEliminar.setVisible(false);
            jButtonEditar.setVisible(false);
        
        }
    }//GEN-LAST:event_formWindowActivated

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        // TODO add your handling code here:
        if (persona != null && persona.getId() != null) {
            manejaOrganizacion(false);
            manejaPersona(true);
            jTreeOrganigrama.setEnabled(false);
            jTextFieldEmpleadoApellido.setText(persona.getApellido());
            jTextFieldEmpleadoNombre.setText(persona.getNombre());
            jTextFieldEmpleadoOrganizacion.setText(persona.getOrganizacion().getNombre());
            jTextFieldEmpleadoNroDoc.setText(persona.getNumeroDocumento());
            jButtonMudarEmpleado.setEnabled(true);
            

        } else if (area != null && area.getId() != null) {
            manejaPersona(false);
            manejaOrganizacion(true);
            jTreeOrganigrama.setEnabled(false);
            jTextFieldAreaNombre.setText(areaPadre.getNombre());
            if (area.getOrganizacionPadre() != null) {
                jTextFieldAreaPadreNombre.setText(areaPadre.getOrganizacionPadre().getNombre());
            }

        } else {
            JOptionPane.showMessageDialog(this, "SELECCIONE AREA O PERSONA.", "Error", 0);
        }
    }//GEN-LAST:event_jButtonEditarActionPerformed
    
    private void jButtonCancelarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarUsuarioActionPerformed
        // TODO add your handling code here:
        jTreeOrganigrama.setEnabled(true);
        jButtonMudarEmpleado.setEnabled(false);
        manejaPersona(false);
        manejaOrganizacion(false);
        
        if (actualizarArbol) {
            actualizarArbol(true,true);
            persona = null;
        }else{
            jTextFieldEmpleadoApellido.setText(persona.getApellido());
            jTextFieldEmpleadoNombre.setText(persona.getNombre());
            jTextFieldEmpleadoOrganizacion.setText(persona.getOrganizacion().getNombre());
            jTextFieldEmpleadoNroDoc.setText(persona.getNumeroDocumento());
        
        }

    }//GEN-LAST:event_jButtonCancelarUsuarioActionPerformed

    private void jButtonCancelarAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarAreaActionPerformed
        // TODO add your handling code here:
        jTreeOrganigrama.setEnabled(true);
        manejaPersona(false);
        manejaOrganizacion(false);

        jTextFieldAreaNombre.setText(areaPadre.getNombre());
        if (area.getOrganizacionPadre() != null) {
            jTextFieldAreaPadreNombre.setText(areaPadre.getOrganizacionPadre().getNombre());
        }

    }//GEN-LAST:event_jButtonCancelarAreaActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        if (persona != null && persona.getId() != null) {
            if (JOptionPane.showConfirmDialog(this, "Desea eliminar al Empleado?", "Eliminar", 0) == 0) {
                personaAction.setPersona(persona);
                try {
                    personaAction.inhabilitarEmpleado();
                    JOptionPane.showMessageDialog(this, "Se ha eliminado con exito", "Info", 1);
                    actualizarArbol(true,true);
                    persona = null;
                } catch (ErrorInesperado ex) {
                    JOptionPane.showMessageDialog(this, "Ha Ocurrido un error", "Error", 0);
                }
            }
        } else if (area != null && area.getId() != null) {

            if (JOptionPane.showConfirmDialog(this, "Desea eliminar el Area interna?", "Eliminar", 0) == 0) {
                if (area.getNivelOrganigrama() == 1) {
                    JOptionPane.showMessageDialog(this, "No se puede Eliminar Area Padre", "Error", 0);
                    return;
                }

                DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeOrganigrama.getLastSelectedPathComponent();
                if (nodoSeleccionado.getChildCount() > 0) {
                    JOptionPane.showMessageDialog(this, "No se puede Eliminar Area, porque tiene Areas o Empleados asociados", "Error", 0);
                    return;
                }

                OrganizacionAction orgaAction = new OrganizacionAction(area);
                try {
                    orgaAction.inhabilitar();
                    JOptionPane.showMessageDialog(this, "Se ha eliminado con exito", "Info", 1);
                    actualizarArbol(true,true);
                    area = null;
                } catch (ErrorInesperado ex) {
                    JOptionPane.showMessageDialog(this, "Ha Ocurrido un error", "Error", 0);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe Seleccionar Area o Empleado.", "Error", 0);
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonMudarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMudarEmpleadoActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Seleccione nueva Area", "MUDAR EMPLEADO DE AREA", 2);
        actualizarArbol(false,false);
        actualizarArbol = true;
        jTreeOrganigrama.setEnabled(true);
        jButtonMudarEmpleado.setEnabled(false);

    }//GEN-LAST:event_jButtonMudarEmpleadoActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        if (jTextFieldFiltroArbol.getText() != null && !jTextFieldFiltroArbol.equals("")) {
            try {
                DefaultMutableTreeNode root = UtilesArbol.crearArbolFiltrado("ORGANIGRAMA", jTextFieldFiltroArbol.getText().toUpperCase(), true);
                jTreeOrganigrama = new JTree(root);
                jTreeOrganigrama.setCellRenderer(new CustomIconRenderer());
                jTreeOrganigrama.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                    public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                        jTreeOrganigramaValueChanged(evt);
                    }
                });
                jScrollPaneOrganigrama.setViewportView(jTreeOrganigrama);
            } catch (ErrorInesperado ei) {
                JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexi√≥n a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(-1);
            }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        // TODO add your handling code here:
        try {
            jTextFieldFiltroArbol.setText("");
            DefaultMutableTreeNode root = UtilesArbol.crearArbol("ORGANIGRAMA", true,false,false);
            jTreeOrganigrama = new JTree(root);
            jTreeOrganigrama.setCellRenderer(new CustomIconRenderer());
            jTreeOrganigrama.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                    jTreeOrganigramaValueChanged(evt);
                }
            });
            jScrollPaneOrganigrama.setViewportView(jTreeOrganigrama);
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexi√≥n a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    
    private boolean validarPersona() {
        if (jTextFieldEmpleadoApellido.getText() == null || jTextFieldEmpleadoApellido.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "INGRESE APELLIDO.", "Error", 0);
            return false;
        }
        if (jTextFieldEmpleadoNombre.getText() == null || jTextFieldEmpleadoNombre.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "INGRESE NOMBRE.", "Error", 0);
            return false;
        }
        if (jTextFieldEmpleadoNroDoc.getText() == null || jTextFieldEmpleadoNroDoc.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "INGRESE NRO DOCUMENTO.", "Error", 0);
            return false;
        }
        
        try {
            Persona personaExiste = new Persona();
            personaExiste = personaAction.findByNumeroDocumento(jTextFieldEmpleadoNroDoc.getText().toUpperCase(),persona.getTipoDocumento());
            if (personaExiste!=null && personaExiste.getId()!=null) {
                if (persona.getId()==null) {
                    ///SI EL NRODOC YA EXISTE, SE VERIFICA QUE LA PERSONA NO EST√â ASIGNADA A OTRO DPTO. INTERNO.
                    if (personaExiste.getOrganizacion()!=null
                            && personaExiste.getOrganizacion().getTipoOrganizacion().toUpperCase().equals("INTERNA")){
                            JOptionPane.showMessageDialog(this, "NRO DE DOCUMENTO YA EXISTE DENTRO DE LA EMPRESA.", "Error", 0);
                            return false;
                    }else{
                        ///LA PERSONA YA EXISTE, SOLO SE ACTUALIZA SUS DATOS.
                        try {
                            persona.setId(personaExiste.getId());
                            personaExiste.setNombre(jTextFieldEmpleadoNombre.getText());
                            personaExiste.setApellido(jTextFieldEmpleadoApellido.getText());
                            personaExiste.setOrganizacion(persona.getOrganizacion());
                            personaAction.setPersona(personaExiste);
                            personaAction.crear();
                            personaAction.habilitar();
                            JOptionPane.showMessageDialog(this, "Persona ya registrada, se actualiza como Empleado.", "Info", 1);
                            manejaPersona(false);
                            actualizarArbol(true,true);
                            persona = null;
                            return false;
                         } catch (EntidadExiste ex) {
                            Logger.getLogger(JDialogOrganigrama.class.getName()).log(Level.SEVERE, null, ex);
                        }
                      }
                    
                }else if(persona.getId() != personaExiste.getId()){
                    JOptionPane.showMessageDialog(this, "NRO DE DOCUMENTO YA EXISTE.", "Error", 0);
                    return false;
                }
            }
         } catch (ErrorInesperado ex) {
            Logger.getLogger(JDialogOrganigrama.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return true;
    }

    private boolean validarOrganizacion() {
        if (jTextFieldAreaNombre.getText() == null || jTextFieldAreaNombre.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "INGRESE NOMBRE DE AREA.", "Error", 0);
            return false;

        }
        return true;
    }

    public Boolean getModoBuscador() {
        return modoBuscador;
    }

    public void setModoBuscador(Boolean modoBuscador) {
        this.modoBuscador = modoBuscador;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogOrganigrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogOrganigrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogOrganigrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogOrganigrama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogOrganigrama dialog = new JDialogOrganigrama(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelarArea;
    private javax.swing.JButton jButtonCancelarUsuario;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardarArea;
    private javax.swing.JButton jButtonGuardarEmpleado;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonMudarEmpleado;
    private javax.swing.JButton jButtonOrganizacionNuevo;
    private javax.swing.JButton jButtonPersonaNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPaneOrganigrama;
    private javax.swing.JTextField jTextFieldAreaNombre;
    private javax.swing.JTextField jTextFieldAreaPadreNombre;
    private javax.swing.JTextField jTextFieldEmpleadoApellido;
    private javax.swing.JTextField jTextFieldEmpleadoNombre;
    private javax.swing.JTextField jTextFieldEmpleadoNroDoc;
    private javax.swing.JTextField jTextFieldEmpleadoOrganizacion;
    private javax.swing.JTextField jTextFieldFiltroArbol;
    private javax.swing.JTree jTreeOrganigrama;
    // End of variables declaration//GEN-END:variables
}
