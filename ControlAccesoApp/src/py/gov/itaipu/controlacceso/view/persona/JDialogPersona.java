/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package py.gov.itaipu.controlacceso.view.persona;

import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Panel;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageInputStreamImpl;
import javax.imageio.stream.ImageOutputStreamImpl;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import py.gov.itaipu.controlacceso.action.CRUDAction;
import py.gov.itaipu.controlacceso.model.Nacionalidad;
import py.gov.itaipu.controlacceso.model.TipoDocumento;
import py.gov.itaipu.controlacceso.view.administracion.parametrogeneral.JDialogTipoDocumento;
import org.jdesktop.observablecollections.ObservableCollections;
import py.gov.itaipu.controlacceso.action.persona.PersonaAction;
import py.gov.itaipu.controlacceso.model.Antecedente;
import py.gov.itaipu.controlacceso.model.Organizacion;
import py.gov.itaipu.controlacceso.model.Persona;
import py.gov.itaipu.controlacceso.model.exception.EntidadExiste;
import py.gov.itaipu.controlacceso.model.exception.ErrorInesperado;
import py.gov.itaipu.controlacceso.test.ImageFrame;
import py.gov.itaipu.controlacceso.test.ShowImage;
import py.gov.itaipu.controlacceso.utils.windows.WindowUtil;
import py.gov.itaipu.controlacceso.view.AdminCamera;
import py.gov.itaipu.controlacceso.view.FileFilterExtension;
import py.gov.itaipu.controlacceso.view.JDialogBuscador;
import py.gov.itaipu.controlacceso.view.administracion.organizacion.JDialogOrganizacionExterna;
import py.gov.itaipu.controlacceso.view.administracion.organizacion.JInternalFrameOrganizacion;
import py.gov.itaipu.controlacceso.view.administracion.organizacion.JInternalFrameOrganizacionExterna;
import py.gov.itaipu.controlacceso.view.administracion.parametrogeneral.JDialogoNacionalidad;
import py.gov.itaipu.controlacceso.view.visita.JDialogFotografia;

/**
 *
 * @author fboy
 */
public class JDialogPersona extends javax.swing.JDialog {

    private CRUDAction<Nacionalidad> nacionalidadAction;
    private CRUDAction<TipoDocumento> tipoDocAction;
    private CRUDAction<Organizacion> organizacionAction;
    private CRUDAction<Antecedente> antecedenteAction;
    private PersonaAction personaAction;
    private Persona persona;
    private Boolean readOnly;
    private BufferedImage imagePersona;
    private ImageIcon iconoFoto;
    private Image imgFotoPersona;
    private File imgFotoPersonaFile;

    /**
     * Creates new form JDialogPersona
     */
    public JDialogPersona(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            readOnly = false;
            persona = new Persona();
            persona.setAntecedentes(new ArrayList<Antecedente>());
            personaAction = new PersonaAction(persona);
            nacionalidadAction = new CRUDAction(new Nacionalidad());
            tipoDocAction = new CRUDAction(new TipoDocumento());
            organizacionAction = new CRUDAction(new Organizacion());
            antecedenteAction = new CRUDAction(new Antecedente());
            initComponents();
            jComboBoxTipoDocumento.setSelectedItem(tipoDocAction.findByNamedQuery("TipoDocumento.findCI").get(0));
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        try{
            listNacionalidades = ObservableCollections.observableList(nacionalidadAction.findAll());
            try{
                listTipoDocumento = ObservableCollections.observableList(tipoDocAction.findAll());
                try{
                    listOrganizaciones = ObservableCollections.observableList(organizacionAction.findAll());
                    listAntecedentes = ObservableCollections.observableList(persona.getAntecedentes())
                    ;
                    jLabel1 = new javax.swing.JLabel();
                    jSeparator1 = new javax.swing.JSeparator();
                    jButtonGuardar = new javax.swing.JButton();
                    jButtonCancelar = new javax.swing.JButton();
                    jComboBoxNacionalidad = new javax.swing.JComboBox();
                    jComboBoxTipoDocumento = new javax.swing.JComboBox();
                    jComboBoxEstadoCivil = new javax.swing.JComboBox();
                    jLabelApe = new javax.swing.JLabel();
                    jButtonNuevoTipoDoc = new javax.swing.JButton();
                    jLabelNomb = new javax.swing.JLabel();
                    jTextFieldApellido = new javax.swing.JTextField();
                    jLabelFechaNac = new javax.swing.JLabel();
                    jTextFieldNombre = new javax.swing.JTextField();
                    jFormattedTextFieldFechaNac = new javax.swing.JFormattedTextField();
                    jLabelNAcion = new javax.swing.JLabel();
                    jLabelEstCiv1 = new javax.swing.JLabel();
                    jLabelEstCiv = new javax.swing.JLabel();
                    jComboBoxSexo = new javax.swing.JComboBox();
                    jLabelNroD = new javax.swing.JLabel();
                    jLabelTipDoc = new javax.swing.JLabel();
                    jTextFieldNroDoc = new javax.swing.JTextField();
                    jLabelOrganizacion = new javax.swing.JLabel();
                    jTextFieldOrganizacion = new javax.swing.JTextField();
                    jButtonBuscarOrganizacion = new javax.swing.JButton();
                    jLabelFoto = new javax.swing.JLabel();
                    jButtonTomarFoto = new javax.swing.JButton();
                    jButtonCargarFoto = new javax.swing.JButton();
                    jButtonNacionalidad = new javax.swing.JButton();
                    jButtonNacionalidadEdit = new javax.swing.JButton();
                    jButtonEditTipoDoc = new javax.swing.JButton();
                    jButtonNuevoOrganizacion = new javax.swing.JButton();
                    jButtonCambiarEstadoPersona = new javax.swing.JButton();
                    jLabelPersonaEstado = new javax.swing.JLabel();
                    jLabelSemaforo = new javax.swing.JLabel();

                } catch (ErrorInesperado ei) {
                    JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
                    System.exit(-1);
                }

            } catch (ErrorInesperado ei) {
                JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(-1);
            }

        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro de Personas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                JDialogPersona.this.windowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("DATOS DE LA PERSONA.");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 34, 200, 17);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(10, 57, 970, 10);

        jButtonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/save.png"))); // NOI18N
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.setNextFocusableComponent(jButtonCancelar);
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGuardar);
        jButtonGuardar.setBounds(240, 410, 110, 25);

        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/exit.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancelar);
        jButtonCancelar.setBounds(355, 410, 110, 25);

        jComboBoxNacionalidad.setNextFocusableComponent(jComboBoxSexo);

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listNacionalidades, jComboBoxNacionalidad);
        bindingGroup.addBinding(jComboBoxBinding);

        getContentPane().add(jComboBoxNacionalidad);
        jComboBoxNacionalidad.setBounds(280, 220, 180, 20);

        jComboBoxTipoDocumento.setNextFocusableComponent(jComboBoxNacionalidad);

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listTipoDocumento, jComboBoxTipoDocumento);
        bindingGroup.addBinding(jComboBoxBinding);

        getContentPane().add(jComboBoxTipoDocumento);
        jComboBoxTipoDocumento.setBounds(280, 190, 180, 20);

        jComboBoxEstadoCivil.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SOLTERO", "CASADO", "DIVORCIADO", "VIUDO" }));
        jComboBoxEstadoCivil.setNextFocusableComponent(jFormattedTextFieldFechaNac);
        getContentPane().add(jComboBoxEstadoCivil);
        jComboBoxEstadoCivil.setBounds(280, 280, 180, 20);

        jLabelApe.setText("Apellido:");
        getContentPane().add(jLabelApe);
        jLabelApe.setBounds(150, 130, 110, 15);

        jButtonNuevoTipoDoc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/new.jpg"))); // NOI18N
        jButtonNuevoTipoDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoTipoDocActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonNuevoTipoDoc);
        jButtonNuevoTipoDoc.setBounds(460, 190, 19, 20);

        jLabelNomb.setText("Nombre:");
        getContentPane().add(jLabelNomb);
        jLabelNomb.setBounds(150, 100, 110, 15);

        jTextFieldApellido.setNextFocusableComponent(jTextFieldNroDoc);
        getContentPane().add(jTextFieldApellido);
        jTextFieldApellido.setBounds(280, 130, 180, 20);

        jLabelFechaNac.setText("Fecha de Nacimiento:");
        getContentPane().add(jLabelFechaNac);
        jLabelFechaNac.setBounds(150, 310, 130, 15);

        jTextFieldNombre.setNextFocusableComponent(jTextFieldApellido);
        getContentPane().add(jTextFieldNombre);
        jTextFieldNombre.setBounds(280, 100, 180, 20);

        jFormattedTextFieldFechaNac.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        jFormattedTextFieldFechaNac.setNextFocusableComponent(jButtonBuscarOrganizacion);
        getContentPane().add(jFormattedTextFieldFechaNac);
        jFormattedTextFieldFechaNac.setBounds(280, 310, 180, 20);

        jLabelNAcion.setText("Nacionalidad:");
        getContentPane().add(jLabelNAcion);
        jLabelNAcion.setBounds(150, 220, 110, 15);

        jLabelEstCiv1.setText("Sexo:");
        getContentPane().add(jLabelEstCiv1);
        jLabelEstCiv1.setBounds(150, 250, 110, 15);

        jLabelEstCiv.setText("Estado Civil:");
        getContentPane().add(jLabelEstCiv);
        jLabelEstCiv.setBounds(150, 280, 110, 15);

        jComboBoxSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MASCULINO", "FEMENINO" }));
        jComboBoxSexo.setNextFocusableComponent(jComboBoxEstadoCivil);
        getContentPane().add(jComboBoxSexo);
        jComboBoxSexo.setBounds(280, 250, 180, 20);

        jLabelNroD.setText("Nro Documento:");
        getContentPane().add(jLabelNroD);
        jLabelNroD.setBounds(150, 160, 110, 15);

        jLabelTipDoc.setText("Tipo Documento:");
        getContentPane().add(jLabelTipDoc);
        jLabelTipDoc.setBounds(150, 190, 110, 15);

        jTextFieldNroDoc.setNextFocusableComponent(jComboBoxTipoDocumento);
        getContentPane().add(jTextFieldNroDoc);
        jTextFieldNroDoc.setBounds(280, 160, 180, 20);

        jLabelOrganizacion.setText("Organizacion:");
        getContentPane().add(jLabelOrganizacion);
        jLabelOrganizacion.setBounds(150, 340, 110, 15);

        jTextFieldOrganizacion.setEditable(false);
        getContentPane().add(jTextFieldOrganizacion);
        jTextFieldOrganizacion.setBounds(280, 340, 180, 20);

        jButtonBuscarOrganizacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/view.png"))); // NOI18N
        jButtonBuscarOrganizacion.setToolTipText("Buscar Organizacion");
        jButtonBuscarOrganizacion.setNextFocusableComponent(jButtonTomarFoto);
        jButtonBuscarOrganizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarOrganizacionActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonBuscarOrganizacion);
        jButtonBuscarOrganizacion.setBounds(460, 340, 19, 20);

        jLabelFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/sin_foto.jpg"))); // NOI18N
        jLabelFoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabelFoto.setPreferredSize(new java.awt.Dimension(459, 419));
        getContentPane().add(jLabelFoto);
        jLabelFoto.setBounds(520, 100, 460, 310);

        jButtonTomarFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/CAMARA.png"))); // NOI18N
        jButtonTomarFoto.setText("Tomar Fotografia");
        jButtonTomarFoto.setNextFocusableComponent(jButtonCargarFoto);
        jButtonTomarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTomarFotoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonTomarFoto);
        jButtonTomarFoto.setBounds(610, 70, 135, 25);

        jButtonCargarFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/carpeta_abierta.jpg"))); // NOI18N
        jButtonCargarFoto.setText("Cargar Fotografia");
        jButtonCargarFoto.setNextFocusableComponent(jButtonGuardar);
        jButtonCargarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarFotoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCargarFoto);
        jButtonCargarFoto.setBounds(750, 70, 139, 25);

        jButtonNacionalidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/new.jpg"))); // NOI18N
        jButtonNacionalidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNacionalidadActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonNacionalidad);
        jButtonNacionalidad.setBounds(460, 220, 19, 20);

        jButtonNacionalidadEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/edit.png"))); // NOI18N
        jButtonNacionalidadEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNacionalidadEditActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonNacionalidadEdit);
        jButtonNacionalidadEdit.setBounds(480, 220, 19, 20);

        jButtonEditTipoDoc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/edit.png"))); // NOI18N
        jButtonEditTipoDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditTipoDocActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEditTipoDoc);
        jButtonEditTipoDoc.setBounds(480, 190, 19, 20);

        jButtonNuevoOrganizacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/new.jpg"))); // NOI18N
        jButtonNuevoOrganizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoOrganizacionActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonNuevoOrganizacion);
        jButtonNuevoOrganizacion.setBounds(480, 340, 19, 20);

        jButtonCambiarEstadoPersona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/check.gif"))); // NOI18N
        jButtonCambiarEstadoPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCambiarEstadoPersonaActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCambiarEstadoPersona);
        jButtonCambiarEstadoPersona.setBounds(40, 160, 57, 33);

        jLabelPersonaEstado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelPersonaEstado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPersonaEstado.setText("Persona Habilitada");
        getContentPane().add(jLabelPersonaEstado);
        jLabelPersonaEstado.setBounds(0, 140, 140, 14);

        jLabelSemaforo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSemaforo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/Semaforo_verde.png"))); // NOI18N
        getContentPane().add(jLabelSemaforo);
        jLabelSemaforo.setBounds(60, 100, 17, 33);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNuevoTipoDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoTipoDocActionPerformed
        // TODO add your handling code here:
        try {
            TipoDocumento td = (TipoDocumento) jComboBoxTipoDocumento.getSelectedItem();
            JDialogTipoDocumento dialogTipoDocumento = new JDialogTipoDocumento(null, rootPaneCheckingEnabled);
            dialogTipoDocumento.setTipoDocumento(new TipoDocumento());
            WindowUtil.centerWindow(dialogTipoDocumento);
            dialogTipoDocumento.setVisible(true);
            listTipoDocumento.clear();
            listTipoDocumento.addAll(tipoDocAction.findAll());
            if (dialogTipoDocumento.getTipoDocumento().getId() != null) {
                jComboBoxTipoDocumento.setSelectedItem(dialogTipoDocumento.getTipoDocumento());
            } else {
                jComboBoxTipoDocumento.setSelectedItem(td);
            }
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonNuevoTipoDocActionPerformed

    public JTextField getjTextFieldNroDoc() {
        return jTextFieldNroDoc;
    }

    public void cargarDatospersona() {
        jTextFieldApellido.setText(persona.getApellido().toUpperCase());
        jTextFieldNombre.setText(persona.getNombre().toUpperCase());
        jTextFieldNroDoc.setText(persona.getNumeroDocumento().toUpperCase());
        jComboBoxTipoDocumento.setSelectedItem(persona.getTipoDocumento());
        
        if (persona.getFechaNacimiento()!=null) {
            jFormattedTextFieldFechaNac.setValue(persona.getFechaNacimiento());
        }
        if (persona.getOrganizacion() != null) {
            jTextFieldOrganizacion.setText((persona.getOrganizacion().getNombre()));
        }
        if (persona.getEstadoCivil()!=null) {
           jComboBoxEstadoCivil.setSelectedItem(persona.getEstadoCivil().toUpperCase());    
        }
        if (persona.getSexo()!=null) {
            jComboBoxSexo.setSelectedItem(persona.getSexo().toUpperCase());
        }
        if (persona.getNacionalidad()!=null) {
            jComboBoxNacionalidad.setSelectedItem(persona.getNacionalidad());
        }
        
        listAntecedentes.clear();
        if (persona.getAntecedentes() != null) {
            listAntecedentes.addAll(persona.getAntecedentes());
        }
        //Cargar Fotografia
        if (persona.getFotografiaPath() != null) {
            BufferedImage image;
            try {
                String rutaImagen = persona.getFotografiaPath();
                File fileImagen = new File(rutaImagen);
                image = ImageIO.read(fileImagen);
                ImageIcon iconoFoto = new javax.swing.ImageIcon(image);
                jLabelFoto.setIcon(iconoFoto);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "No se puede Mostrar la Fotografia en este momento", "Error", 0);
            }
        }

        //Cargar estado de la persona
        if (persona.getEstado() != null && persona.getEstado().getNombre().equals("INHABILITADO")) {
            jLabelSemaforo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/Semaforo_rojo.png")));
            jLabelPersonaEstado.setText("PERSONA NO HABILITADA");
            jButtonCambiarEstadoPersona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/check.gif")));
            jButtonCambiarEstadoPersona.setToolTipText("HABILITAR");
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "ATENCIÓN!, la persona está inhabilitada.", "Warning", 2);
        } else {
            jLabelSemaforo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/Semaforo_verde.png")));
            jLabelPersonaEstado.setText("PERSONA HABILITADA");
            jButtonCambiarEstadoPersona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/stop_sign.jpeg")));
            jButtonCambiarEstadoPersona.setToolTipText("INHABILITAR");
        }

//        if (persona.getFotografia() != null) {
//            ByteArrayInputStream bis = new ByteArrayInputStream(persona.getFotografia());
//            BufferedImage image;
//            try {
//                image = ImageIO.read(bis);
//                iconoFoto = new javax.swing.ImageIcon(image);
//                jLabelFoto.setIcon(iconoFoto);
//            } catch (IOException ex) {
//                Logger.getLogger(JDialogPersona.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//            
//        }



    }

    public Persona getPersona() {
        return persona;
    }

    public void setPersona(Persona persona) {
        this.persona = persona;
    }

    public Boolean getReadOnly() {
        return readOnly;
    }

    public void setReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
    }

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // TODO add your handling code here:
        try {
            if (validacionesNuevaPersona()) {

                personaAction.setPersona(persona);
                persona.setApellido(jTextFieldApellido.getText());
                persona.setNombre(jTextFieldNombre.getText());
                persona.setNumeroDocumento(jTextFieldNroDoc.getText());
                persona.setFechaNacimiento((Date) jFormattedTextFieldFechaNac.getValue());
                persona.setEstadoCivil(jComboBoxEstadoCivil.getSelectedItem().toString());
                persona.setSexo(jComboBoxSexo.getSelectedItem().toString());
                persona.setNacionalidad((Nacionalidad) listNacionalidades.get(jComboBoxNacionalidad.getSelectedIndex()));
                persona.setTipoDocumento((TipoDocumento) listTipoDocumento.get(jComboBoxTipoDocumento.getSelectedIndex()));
                guardarImagen(imgFotoPersona, imgFotoPersonaFile);


                if (persona.getId() != null) {
                    try {
                        personaAction.guardar();
                        JOptionPane.showMessageDialog(this, "Se ha guardado con exito los nuevos Datos de Persona", "Info", 1);
                    } catch (EntidadExiste e) {
                        JOptionPane.showMessageDialog(this, "La persona ya existe", "Error", 0);
                        return;
                    }
                } else {
                    try {
                        personaAction.crear();
                        JOptionPane.showMessageDialog(this, "Se ha creado con exito nueva Persona", "Info", 1);
                    } catch (EntidadExiste e) {
                        JOptionPane.showMessageDialog(this, "La persona ya existe", "Error", 0);
                        return;
                    }
                }

                this.dispose();
            }
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private boolean validacionesNuevaPersona() {
        boolean resultado = true;
        if (jTextFieldApellido.getText() == null || jTextFieldApellido.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Campo Apellido es Obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            resultado = false;
        } else if (jTextFieldNombre.getText() == null || jTextFieldNombre.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Campo Nombre es Obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            resultado = false;
        } else if (jTextFieldNroDoc.getText() == null || jTextFieldNroDoc.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Campo Nro Documento es Obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            resultado = false;
        } else if (jComboBoxTipoDocumento.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Seleccionar el Tipo de Documento", "Error", JOptionPane.ERROR_MESSAGE);
            resultado = false;
        } /*else if (persona.getOrganizacion()==null || persona.getOrganizacion().getId()==null){
         JOptionPane.showMessageDialog(null, "Seleccionar la Organizacion de la Persona", "Error", JOptionPane.ERROR_MESSAGE);
         resultado = false;
         } */
        return resultado;
    }

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void windowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowActivated
        // TODO add your handling code here:
        if (readOnly) {
            jTextFieldApellido.setEditable(false);
            jTextFieldNombre.setEditable(false);
            jTextFieldNroDoc.setEditable(false);
            jFormattedTextFieldFechaNac.setEditable(false);
            jComboBoxEstadoCivil.setEnabled(false);
            jComboBoxNacionalidad.setEnabled(false);
            jComboBoxSexo.setEnabled(false);
            jButtonBuscarOrganizacion.setVisible(false);
            jComboBoxTipoDocumento.setEnabled(false);
            jButtonGuardar.setVisible(false);
            jButtonCargarFoto.setVisible(false);
            jButtonTomarFoto.setVisible(false);
        }

    }//GEN-LAST:event_windowActivated

    private void jButtonCargarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarFotoActionPerformed
        // TODO add your handling code here:
        File input;
        //Selector de Archivos
        JFileChooser chooser = new JFileChooser();
        //Filtro De Extensiones
        FileFilterExtension filtroExtension = new FileFilterExtension("JPG, JPEG, PNG", new String[]{"JPG", "JPEG", "PNG"});
        chooser.setFileFilter(filtroExtension);
        //Desaparece la opcion TODOS LOS ARCHIVOS
        chooser.setAcceptAllFileFilterUsed(false);

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            imgFotoPersonaFile = chooser.getSelectedFile();

            ////LA FOTOGRAFIA YA NO SE GUARDA EN LA BD. SE GUARDA EL ARCHIVO Y EL PATH EN EL PROYECTO
            //            RandomAccessFile f;
            // byte[] fotografiaByte = null;
            // f = new RandomAccessFile(chooser.getSelectedFile(), "r");
//                fotografiaByte = new byte[(int) f.length()];
//                f.read(fotografiaByte);
//                persona.setFotografia(fotografiaByte);



            try {
                BufferedImage image = ImageIO.read(chooser.getSelectedFile());
                iconoFoto = new javax.swing.ImageIcon(image);
                jLabelFoto.setIcon(iconoFoto);
            } catch (IOException ex) {
                Logger.getLogger(JDialogPersona.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonCargarFotoActionPerformed

    private void jButtonBuscarOrganizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarOrganizacionActionPerformed
        // TODO add your handling code here:
        JInternalFrameOrganizacion jFrameOrganizacion = new JInternalFrameOrganizacion();
        jFrameOrganizacion.setModoBuscador(true);
        jFrameOrganizacion.setVisible(true);
        JDialogBuscador buscador = new JDialogBuscador(null, rootPaneCheckingEnabled);
        buscador.setSize(jFrameOrganizacion.getSize());
        jFrameOrganizacion.setClosable(false);
        jFrameOrganizacion.setResizable(false);
        jFrameOrganizacion.setTitle("Buscador de organizaciones");
        buscador.getjDesktopPaneBuscador().add(jFrameOrganizacion);
        buscador.setVisible(true);
        if (jFrameOrganizacion.getOrganizacionSeleccionada() != null) {
            persona.setOrganizacion(jFrameOrganizacion.getOrganizacionSeleccionada());
            jTextFieldOrganizacion.setText(persona.getOrganizacion().getNombre());
        }
    }//GEN-LAST:event_jButtonBuscarOrganizacionActionPerformed

    private void jButtonTomarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTomarFotoActionPerformed
        // TODO add your handling code here:
        try {
             WindowUtil.centerWindow(AdminCamera.formulario);
            //            dialogFotografia.setPersona(persona);
            AdminCamera.formulario.mostrarFormulario("CAPTURAR", persona);       // TODO add your handling code here:
            if (AdminCamera.formulario.isCapturado()) {
                imgFotoPersona = AdminCamera.formulario.getImg();
                mostrarFotoPersona();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "En este momento no se puede inicializar la camara, verifique el dispositivo e intente de nuevo", "Error", 0);
            return;
        }

    }//GEN-LAST:event_jButtonTomarFotoActionPerformed

    private void jButtonNacionalidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNacionalidadActionPerformed
        // TODO add your handling code here:
        try {
            Nacionalidad nac = (Nacionalidad) jComboBoxNacionalidad.getSelectedItem();
            JDialogoNacionalidad dialogNacionalidad = new JDialogoNacionalidad(null, rootPaneCheckingEnabled);
            dialogNacionalidad.setNacionalidad(new Nacionalidad());
            WindowUtil.centerWindow(dialogNacionalidad);
            dialogNacionalidad.setVisible(true);
            listNacionalidades.clear();
            listNacionalidades.addAll(nacionalidadAction.findAll());
            if (dialogNacionalidad.getNacionalidad().getId() != null) {
                jComboBoxNacionalidad.setSelectedItem(dialogNacionalidad.getNacionalidad());
            } else {
                jComboBoxNacionalidad.setSelectedItem(nac);
            }
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonNacionalidadActionPerformed

    private void jButtonNacionalidadEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNacionalidadEditActionPerformed
        // TODO add your handling code here:
        try {
            JDialogoNacionalidad dialogNacionalidad = new JDialogoNacionalidad(null, rootPaneCheckingEnabled);
            dialogNacionalidad.setNacionalidad((Nacionalidad) jComboBoxNacionalidad.getSelectedItem());
            WindowUtil.centerWindow(dialogNacionalidad);
            dialogNacionalidad.setVisible(true);
            listNacionalidades.clear();
            listNacionalidades.addAll(nacionalidadAction.findAll());
            jComboBoxNacionalidad.setSelectedItem(dialogNacionalidad.getNacionalidad());
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonNacionalidadEditActionPerformed

    private void jButtonEditTipoDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditTipoDocActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        try {
            JDialogTipoDocumento dialogTipoDocumento = new JDialogTipoDocumento(null, rootPaneCheckingEnabled);
            dialogTipoDocumento.setTipoDocumento((TipoDocumento) jComboBoxTipoDocumento.getSelectedItem());
            WindowUtil.centerWindow(dialogTipoDocumento);
            dialogTipoDocumento.setVisible(true);
            listTipoDocumento.clear();
            listTipoDocumento.addAll(tipoDocAction.findAll());
            jComboBoxTipoDocumento.setSelectedItem(dialogTipoDocumento.getTipoDocumento());
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonEditTipoDocActionPerformed

    private void jButtonNuevoOrganizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoOrganizacionActionPerformed
        // TODO add your handling code here:

        Organizacion or = persona.getOrganizacion();
        JDialogOrganizacionExterna jdO = new JDialogOrganizacionExterna(null, true);
        jdO.setOrganizacion(new Organizacion());
        WindowUtil.centerWindow(jdO);
        jdO.setVisible(true);
        if (jdO.getOrganizacion().getId() != null) {
            persona.setOrganizacion(jdO.getOrganizacion());
            jTextFieldOrganizacion.setText(persona.getOrganizacion().getNombre());
        }

    }//GEN-LAST:event_jButtonNuevoOrganizacionActionPerformed

    private void jButtonCambiarEstadoPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCambiarEstadoPersonaActionPerformed
        // TODO add your handling code here:
        try {
            personaAction.setPersona(persona);
            if (persona.getEstado() != null && persona.getEstado().getNombre().equals("INHABILITADO")) {
                personaAction.habilitar();
                jLabelSemaforo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/Semaforo_verde.png")));
                jLabelPersonaEstado.setText("PERSONA HABILITADA");
                jButtonCambiarEstadoPersona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/stop_sign.jpeg")));
                jButtonCambiarEstadoPersona.setToolTipText("INHABILITAR");

            } else {
                personaAction.inhabilitar();
                jLabelSemaforo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/Semaforo_rojo.png")));
                jLabelPersonaEstado.setText("PERSONA NO HABILITADA");
                jButtonCambiarEstadoPersona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/img/check.gif")));
                jButtonCambiarEstadoPersona.setToolTipText("HABILITAR");
            }
        } catch (ErrorInesperado ei) {
            JOptionPane.showMessageDialog(null, "Verfique con el administrador la conexión a la base de datos y vuelva a intentar.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }//GEN-LAST:event_jButtonCambiarEstadoPersonaActionPerformed

    private void mostrarFotoPersona() {

        //REGULAR TAMAÑO    
        Image imageScale = imgFotoPersona.getScaledInstance(530, 310, imgFotoPersona.SCALE_FAST);
//                ImageIcon iconoFoto = new javax.swing.ImageIcon(imageScale);
        ImageIcon iconoFoto = new javax.swing.ImageIcon(imgFotoPersona);
        jLabelFoto.setIcon(iconoFoto);

    }

    public JComboBox getjComboBoxTipoDocumento() {
        return jComboBoxTipoDocumento;
    }

    private void guardarImagen(Image img, File file) {
        String string = persona.getFotografiaPath();
        if (img != null) {
            try {
                int w = img.getWidth(null);
                int h = img.getHeight(null);
                BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
                Graphics2D g2 = bi.createGraphics();
                g2.drawImage(img, 0, 0, null);
                g2.dispose();
                String fileType = string.substring(string.indexOf('.') + 1);
                ImageIO.write(bi, fileType, new File(string));
                persona.setFotografiaPath(string);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se ha podido generar el archivo de Fotografia", "Error", 0);
            }
        } else if (imgFotoPersonaFile != null) {
            try {
                BufferedImage bi = ImageIO.read(imgFotoPersonaFile);
                String fileType = string.substring(string.indexOf('.') + 1);
                ImageIO.write(bi, fileType, new File(string));
                persona.setFotografiaPath(string);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "No se ha podido generar el archivo de Fotografia", "Error", 0);
            }
        }




    }

    /**
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogPersona dialog = new JDialogPersona(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscarOrganizacion;
    private javax.swing.JButton jButtonCambiarEstadoPersona;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonCargarFoto;
    private javax.swing.JButton jButtonEditTipoDoc;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonNacionalidad;
    private javax.swing.JButton jButtonNacionalidadEdit;
    private javax.swing.JButton jButtonNuevoOrganizacion;
    private javax.swing.JButton jButtonNuevoTipoDoc;
    private javax.swing.JButton jButtonTomarFoto;
    private javax.swing.JComboBox jComboBoxEstadoCivil;
    private javax.swing.JComboBox jComboBoxNacionalidad;
    private javax.swing.JComboBox jComboBoxSexo;
    private javax.swing.JComboBox jComboBoxTipoDocumento;
    private javax.swing.JFormattedTextField jFormattedTextFieldFechaNac;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelApe;
    private javax.swing.JLabel jLabelEstCiv;
    private javax.swing.JLabel jLabelEstCiv1;
    private javax.swing.JLabel jLabelFechaNac;
    private javax.swing.JLabel jLabelFoto;
    private javax.swing.JLabel jLabelNAcion;
    private javax.swing.JLabel jLabelNomb;
    private javax.swing.JLabel jLabelNroD;
    private javax.swing.JLabel jLabelOrganizacion;
    private javax.swing.JLabel jLabelPersonaEstado;
    private javax.swing.JLabel jLabelSemaforo;
    private javax.swing.JLabel jLabelTipDoc;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextFieldApellido;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldNroDoc;
    private javax.swing.JTextField jTextFieldOrganizacion;
    private java.util.List listAntecedentes;
    private java.util.List listNacionalidades;
    private java.util.List listOrganizaciones;
    private java.util.List listTipoDocumento;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
